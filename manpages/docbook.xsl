<?xml version='1.0'?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:exsl="http://exslt.org/common"
                exclude-result-prefixes="exsl"
                version='1.0'>

<!-- ********************************************************************
     $Id$
     ********************************************************************

     This file is part of the XSL DocBook Stylesheet distribution.
     See ../README or http://docbook.sf.net/release/xsl/current/ for
     copyright and other information.

     ******************************************************************** -->

<!-- ==================================================================== -->

<xsl:import href="../html/docbook.xsl"/>
<xsl:include href="param.xsl"/>
<xsl:include href="general.xsl"/>
<xsl:include href="refentry.xsl"/>
<xsl:include href="block.xsl"/>
<xsl:include href="inline.xsl"/>
<xsl:include href="synop.xsl"/>
<xsl:include href="lists.xsl"/>
<xsl:include href="xref.xsl"/>

<!-- Needed for chunker.xsl (for now): -->
<xsl:param name="chunker.output.method" select="'text'"/>
<xsl:param name="chunker.output.encoding" select="'ISO-8859-1'"/>

<xsl:output method="text"
            encoding="ISO-8859-1"
            indent="no"/>

<!-- if document does not contain at least one refentry, then emit a -->
<!-- message and stop -->
<xsl:template match="/">
  <xsl:choose>
    <xsl:when test="//refentry">
      <xsl:apply-templates select="//refentry"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:message>No refentry elements!</xsl:message>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<!-- ============================================================== -->

<xsl:template match="refentry">

  <xsl:variable name="get.metadata">
    <xsl:call-template name="get.metadata"/>
  </xsl:variable>

  <xsl:variable name="metadata" select="exsl:node-set($get.metadata)"/>

  <xsl:call-template name="write.text.chunk">
    <xsl:with-param name="filename" select="$metadata/filename"/>
    <xsl:with-param name="content">

      <!-- page header (commented-out at top of roff source) -->
      <xsl:call-template name="page.header"/>
      
      <!-- .TH line (sets title stuff and begin and end)-->
      <xsl:call-template name="TH.title.section">
        <xsl:with-param name="reftitle" select="$metadata/reftitle"/>
        <xsl:with-param name="section" select="$metadata/section"/>
        <xsl:with-param name="date" select="$metadata/date"/>
        <xsl:with-param name="productname" select="$metadata/productname"/>
        <xsl:with-param name="extra3" select="$metadata/extra3"/>
      </xsl:call-template>
      
      <!-- main body of man page -->
      <xsl:call-template name="main.body"/>

      <!-- AUTHOR section (at end of man page) -->
      <xsl:call-template name="author.section"/>
      
    </xsl:with-param>
  </xsl:call-template>
  <!-- Now generate stub include pages for every page documented in
       this refentry (except the page itself) -->
  <xsl:for-each select="refnamediv/refname">
    <xsl:if test=". != $metadata/name">
      <xsl:call-template name="write.text.chunk">
        <xsl:with-param name="filename"
                        select="concat(normalize-space(.), '.',
                                $metadata/section)"/>
        <xsl:with-param
            name="content"
            select="concat('.so man',
                    $metadata/section,
                    '/',
                    $metadata/name,
                    '.',
                    $metadata/section,
                    '&#10;')"/>
      </xsl:call-template>
    </xsl:if>
  </xsl:for-each>
</xsl:template>

<xsl:template match="refmeta"></xsl:template>
<xsl:template match="title"></xsl:template>
<xsl:template match="abstract"></xsl:template>

<!-- ============================================================== -->

<!--        Named templates for each part of output page -->

<!-- ============================================================== -->

<!-- * page header     comment part at top of roff source; unrendered -->
<!-- * TH line         "title" lines at top/botton of rendered page~ -->
<!-- * main body       the bulk of the rendered page -->
<!-- * AUTHOR section  last part of rendered page (usually)-->

<!-- ============================================================== -->

<xsl:template name="page.header">
  <xsl:text>.\"Generated by db2man.xsl. Don't modify this, modify the source.&#10;</xsl:text>
</xsl:template>

<xsl:template name="TH.title.section">
  <xsl:param name="reftitle"/>
  <xsl:param name="section"/>
  <xsl:param name="date"/>
  <xsl:param name="productname"/>
  <xsl:param name="extra3"/>

  <xsl:text>.\" "TITLE" "SECTION NUMBER" "DATE" "PRODUCT" "GROUP TITLE"</xsl:text>
  <xsl:text>&#10;</xsl:text>
      <xsl:text>.TH "</xsl:text>
      <xsl:value-of select="translate($reftitle,
                            'abcdefghijklmnopqrstuvwxyz',
                            'ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/>
      <xsl:text>" </xsl:text>
      <xsl:value-of select="$section"/>
      <xsl:text> "</xsl:text>
      <xsl:value-of select="normalize-space($date)"/>
      <xsl:text>" "</xsl:text>
      <xsl:value-of select="normalize-space($productname)"/>
      <xsl:text>" "</xsl:text>
      <xsl:value-of select="normalize-space($extra3)"/>
      <xsl:text>"&#10;</xsl:text>
</xsl:template>

<xsl:template name="main.body">
  <xsl:apply-templates/>
</xsl:template>

<xsl:template name="author.section">
  <xsl:choose>
    <xsl:when test="info//author">
      <xsl:apply-templates select="info" mode="authorsect"/>
    </xsl:when>
    <xsl:when test="refentryinfo//author">
      <xsl:apply-templates select="refentryinfo" mode="authorsect"/>
    </xsl:when>
    <xsl:when test="/book/bookinfo//author">
      <xsl:apply-templates select="/book/bookinfo" mode="authorsect"/>
    </xsl:when>
    <xsl:when test="/article/articleinfo//author">
      <xsl:apply-templates select="/article/articleinfo" mode="authorsect"/>
    </xsl:when>
  </xsl:choose>
</xsl:template>

<!-- ============================================================== -->

<!--        Named template for getting metadata  -->

<!-- ============================================================== -->

<xsl:template name="get.metadata">

  <xsl:variable name="name" select="refnamediv/refname[1]"/>

  <xsl:variable name="section">
    <xsl:choose>
      <xsl:when test="refmeta/manvolnum">
        <xsl:value-of select="refmeta/manvolnum[1]"/>
      </xsl:when>
      <xsl:when test=".//funcsynopsis">3</xsl:when>
      <xsl:otherwise>1</xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <section>
    <xsl:value-of select="$section"/>
  </section>

  <filename>
    <xsl:call-template name="replace-string">
      <!-- replace spaces in source filename with underscores in output filename -->
      <xsl:with-param name="content"
                      select="concat(normalize-space ($name), '.', $section)"/>
      <xsl:with-param name="replace" select="' '"/>
      <xsl:with-param name="with" select="'_'"/>
    </xsl:call-template>
  </filename>

  <xsl:variable name="reftitle">
    <xsl:choose>
      <xsl:when test="refmeta/refentrytitle">
        <xsl:copy>
          <xsl:apply-templates select="refmeta/refentrytitle/node()"/>
        </xsl:copy>
      </xsl:when>
      <xsl:otherwise>
        <xsl:copy-of select="$name"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:variable>

  <reftitle>
    <xsl:value-of select="substring($reftitle, 1, 20)"/>
  </reftitle>

  <date>
    <xsl:choose>
      <xsl:when test="info/date">
        <xsl:copy>
          <xsl:apply-templates select="info/date/node()"/>
        </xsl:copy>
      </xsl:when>
      <xsl:when test="refentryinfo/date">
        <xsl:copy>
          <xsl:apply-templates select="refentryinfo/date/node()"/>
        </xsl:copy>
      </xsl:when>
      <xsl:otherwise>
        <xsl:copy>
          <xsl:apply-templates select="../referenceinfo/date/node()"/>
        </xsl:copy>
      </xsl:otherwise>
    </xsl:choose>
  </date>
  
  <productname>
    <xsl:choose>
      <xsl:when test="info/productname">
        <xsl:apply-templates select="info/productname/node()"/>
      </xsl:when>
      <xsl:when test="refentryinfo/productname">
        <xsl:apply-templates select="refentryinfo/productnam/node()"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="../referenceinfo/productname/node()"/>
      </xsl:otherwise>
    </xsl:choose>
  </productname>
  
  <extra3></extra3>

</xsl:template>

<!-- ============================================================== -->

<xsl:template match="info|articleinfo|bookinfo|refentryinfo" mode="authorsect">
  <xsl:text>.SH "</xsl:text>
  <xsl:call-template name="string.upper">
    <xsl:with-param name="string">
      <xsl:call-template name="gentext">
        <xsl:with-param name="key" select="'Author'"/>
      </xsl:call-template>
    </xsl:with-param>
  </xsl:call-template>
  <xsl:text>"&#10;</xsl:text>

  <xsl:for-each select=".//author">
    <xsl:if test="position() > 1">
      <xsl:text>, </xsl:text>
    </xsl:if>
    <xsl:apply-templates select="."/>
  </xsl:for-each>
  <xsl:text>. &#10;</xsl:text>
  <xsl:if test=".//editor">
    <xsl:text>.br&#10;</xsl:text>
    <xsl:apply-templates select=".//editor"/>
    <xsl:text>. (man page)&#10;</xsl:text>
  </xsl:if>
  <xsl:for-each select="address">
  <xsl:text>.br&#10;</xsl:text>
    <xsl:apply-templates/>
    <xsl:text>&#10;</xsl:text>
  </xsl:for-each>
</xsl:template>

<xsl:template match="author|editor">
  <xsl:call-template name="person.name"/>
  <xsl:if test=".//email">
    <xsl:text> </xsl:text>
    <xsl:apply-templates select=".//email"/>
  </xsl:if>
</xsl:template>

<xsl:template match="email">
  <xsl:text>&lt;</xsl:text>
  <xsl:apply-templates/>
  <xsl:text>&gt;</xsl:text>
</xsl:template>

<xsl:template match="copyright">
  <xsl:text>Copyright \(co  </xsl:text>
  <xsl:apply-templates select="./year" />
  <xsl:text>.Sp&#10;</xsl:text>
</xsl:template>

</xsl:stylesheet>
